{"version":3,"sources":["webpack:///./js/timerr.js","webpack:///./js/promise/task1.js","webpack:///./js/promise/task2.js","webpack:///./js/promise/task3.js","webpack:///./js/colors.js"],"names":["refs","days","document","querySelector","hours","mins","secs","selector","targetDate","this","setInterval","deltaTime","Date","timeCalc","String","Math","floor","padStart","updateClock","textContent","resultTime","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","random","id","logSuccess","logError","warn","amount","catch","colors","body","start","stop","timerId","addEventListener","color","length","style","backgroundColor","disabled","clearInterval"],"mappings":"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","file":"main.30c4a3bec70a641f614d.js","sourcesContent":["const refs = {\r\n  days: document.querySelector('span[data-value=\"days\"]'),\r\n  hours: document.querySelector('span[data-value=\"hours\"]'),\r\n  mins: document.querySelector('span[data-value=\"mins\"]'),\r\n  secs: document.querySelector('span[data-value=\"secs\"]'),\r\n};\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n  }\r\n\r\n  get resultTime() {\r\n    setInterval(() => {\r\n      this.deltaTime = this.targetDate - new Date();\r\n      this.timeCalc;\r\n    }, 1000);\r\n  }\r\n\r\n  get timeCalc() {\r\n    return (\r\n      (this.days = String(Math.floor(this.deltaTime / (1000 * 60 * 60 * 24))).padStart(2,\"0\")),\r\n      (this.hours = String(Math.floor(\r\n        (this.deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\r\n      )).padStart(2,\"0\")),\r\n      (this.mins = String(Math.floor(\r\n        (this.deltaTime % (1000 * 60 * 60)) / (1000 * 60),\r\n      )).padStart(2,\"0\")),\r\n      (this.secs = String(Math.floor((this.deltaTime % (1000 * 60)) / 1000)).padStart(2,\"0\")),\r\n      this.updateClock\r\n    );\r\n  }\r\n\r\n  get updateClock() {\r\n    refs.days.textContent = this.days;\r\n    refs.hours.textContent = this.hours;\r\n    refs.mins.textContent = this.mins;\r\n    refs.secs.textContent = this.secs;\r\n  }\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jan 1, 2021'),\r\n});\r\n\r\ntimer.resultTime;","const delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n","const colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n];\r\nconst refs = {\r\n  body: document.body,\r\n  start: document.querySelector('button[data-action=\"start\"]'),\r\n  stop: document.querySelector('button[data-action=\"stop\"]'),\r\n};\r\nlet timerId = null;\r\n\r\nrefs.start.addEventListener('click', start);\r\nrefs.stop.addEventListener('click', stop);\r\n\r\nfunction start() {\r\n  timerId = setInterval(() => {\r\n    changeColor(matchColor());\r\n  }, 1000);\r\n\r\n  refs.start.disabled = true\r\n}\r\n\r\nfunction stop() {\r\n  clearInterval(timerId);\r\n  refs.start.disabled = false\r\n}\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nfunction matchColor() {\r\n  return colors[randomIntegerFromInterval(0, colors.length - 1)];\r\n}\r\n\r\nfunction changeColor(color) {\r\n  refs.body.style.backgroundColor = `${color}`;\r\n}\r\n"],"sourceRoot":""}