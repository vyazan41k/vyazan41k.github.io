{"version":3,"sources":["webpack:///./js/promise/task1.js","webpack:///./js/promise/task2.js","webpack:///./js/promise/task3.js","webpack:///./js/colors.js","webpack:///./js/timer.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch","colors","refs","body","document","querySelector","start","stop","timerId","addEventListener","setInterval","color","length","style","backgroundColor","setAttribute","clearInterval","removeAttribute","days","hours","mins","secs","targetTime","Date","curentTime","textContent"],"mappings":"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","file":"main.e165cd681b7d019f90d2.js","sourcesContent":["const delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n","const colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n];\r\nconst refs = {\r\n  body: document.querySelector('body'),\r\n  start: document.querySelector('button[data-action=\"start\"]'),\r\n  stop: document.querySelector('button[data-action=\"stop\"]'),\r\n};\r\nlet timerId = null;\r\n\r\nrefs.start.addEventListener('click', start);\r\nrefs.stop.addEventListener('click', stop);\r\n\r\nfunction start() {\r\n  timerId = setInterval(() => {\r\n    changeColor(matchColor());\r\n  }, 1000);\r\n\r\n  refs.start.setAttribute('disabled', 'disabled');\r\n}\r\n\r\nfunction stop() {\r\n  clearInterval(timerId);\r\n  refs.start.removeAttribute('disabled');\r\n}\r\n\r\nfunction matchColor() {\r\n  const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  return colors[randomIntegerFromInterval(0, colors.length - 1)];\r\n}\r\n\r\nfunction changeColor(color) {\r\n  refs.body.style.backgroundColor = `${color}`;\r\n}\r\n","const refs = {\r\n  days: document.querySelector('span[data-value=\"days\"]'),\r\n  hours: document.querySelector('span[data-value=\"hours\"]'),\r\n  mins: document.querySelector('span[data-value=\"mins\"]'),\r\n  secs: document.querySelector('span[data-value=\"secs\"]'),\r\n};\r\n\r\nsetInterval(() => {\r\n  const targetTime = new Date(2021, 5, 8, 12, 0, 0, 0);\r\n  const curentTime = new Date();\r\n  const deltaTime = targetTime - curentTime;\r\n  updateClock(deltaTime);\r\n}, 1000);\r\n\r\nfunction updateClock(time) {\r\n  const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n  const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n  const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n  const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n  refs.days.textContent = `${days}`;\r\n  refs.hours.textContent = `${hours}`;\r\n  refs.mins.textContent = `${mins}`;\r\n  refs.secs.textContent = `${secs}`;\r\n}\r\n"],"sourceRoot":""}